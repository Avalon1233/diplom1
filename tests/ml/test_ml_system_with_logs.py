#!/usr/bin/env python3
"""
Comprehensive ML System Test with Enhanced Logging and Visualization
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π ML —Å–∏—Å—Ç–µ–º—ã —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""

import os
import sys
import time
import logging
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from typing import Dict, Any, List
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ml_system_test.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger('ML_SYSTEM_TEST')

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è Windows
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

class MLSystemTester:
    """
    –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä ML —Å–∏—Å—Ç–µ–º—ã —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    
    def __init__(self):
        self.test_results = {}
        self.start_time = time.time()
        self.logger = logger
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs('test_results', exist_ok=True)
        os.makedirs('test_results/plots', exist_ok=True)
        os.makedirs('test_results/logs', exist_ok=True)
        
        self.logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML System Tester")
        self.logger.info("=" * 80)
    
    def log_step(self, step_name: str, status: str = "START", details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
        elapsed = time.time() - self.start_time
        status_emoji = {
            "START": "üîÑ",
            "SUCCESS": "‚úÖ", 
            "ERROR": "‚ùå",
            "WARNING": "‚ö†Ô∏è",
            "INFO": "‚ÑπÔ∏è"
        }
        
        emoji = status_emoji.get(status, "üìù")
        self.logger.info(f"{emoji} [{elapsed:.2f}s] {step_name} {details}")
    
    def test_imports_and_dependencies(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log_step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤", "START")
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            import flask
            import numpy
            import pandas
            import sklearn
            import talib
            
            self.log_step("–û—Å–Ω–æ–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏", "SUCCESS", f"Flask: {flask.__version__}, NumPy: {numpy.__version__}")
            
            # ML –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            optional_libs = {}
            try:
                import torch
                optional_libs['PyTorch'] = torch.__version__
                self.log_step("PyTorch", "SUCCESS", f"–í–µ—Ä—Å–∏—è: {torch.__version__}")
            except ImportError:
                self.log_step("PyTorch", "WARNING", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            try:
                import xgboost
                optional_libs['XGBoost'] = xgboost.__version__
                self.log_step("XGBoost", "SUCCESS", f"–í–µ—Ä—Å–∏—è: {xgboost.__version__}")
            except ImportError:
                self.log_step("XGBoost", "WARNING", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            try:
                import transformers
                optional_libs['Transformers'] = transformers.__version__
                self.log_step("Transformers", "SUCCESS", f"–í–µ—Ä—Å–∏—è: {transformers.__version__}")
            except ImportError:
                self.log_step("Transformers", "WARNING", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.test_results['dependencies'] = {
                'status': 'SUCCESS',
                'optional_libraries': optional_libs
            }
            
            return True
            
        except Exception as e:
            self.log_step("–ò–º–ø–æ—Ä—Ç—ã", "ERROR", str(e))
            self.test_results['dependencies'] = {'status': 'ERROR', 'error': str(e)}
            return False
    
    def test_ensemble_model(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ensemble ML –º–æ–¥–µ–ª–∏"""
        self.log_step("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ensemble –º–æ–¥–µ–ª–∏", "START")
        
        try:
            from app.services.analysis_service import EnsembleMLModel, AdvancedFeatureEngineering
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            np.random.seed(42)
            n_samples = 1000
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
            time_series = np.arange(n_samples)
            trend = 0.1 * time_series
            seasonal = 10 * np.sin(2 * np.pi * time_series / 100)
            noise = np.random.normal(0, 5, n_samples)
            prices = 50000 + trend + seasonal + noise
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å OHLCV –¥–∞–Ω–Ω—ã–º–∏
            test_data = []
            for i in range(n_samples):
                price = prices[i]
                high = price * (1 + abs(np.random.normal(0, 0.005)))
                low = price * (1 - abs(np.random.normal(0, 0.005)))
                volume = np.random.uniform(1000, 5000)
                
                test_data.append({
                    'open': prices[i-1] if i > 0 else price,
                    'high': high,
                    'low': low,
                    'close': price,
                    'volume': volume
                })
            
            df_test = pd.DataFrame(test_data)
            self.log_step("–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ", "SUCCESS", f"–°–æ–∑–¥–∞–Ω–æ {len(df_test)} –æ–±—Ä–∞–∑—Ü–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            feature_engineer = AdvancedFeatureEngineering()
            df_features = feature_engineer.create_advanced_features(df_test.copy())
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            feature_columns = [col for col in df_features.columns 
                             if col not in ['timestamp', 'open', 'high', 'low', 'close', 'volume']]
            
            valid_features = []
            for col in feature_columns:
                if not df_features[col].isna().all() and df_features[col].std() > 1e-8:
                    valid_features.append(col)
            
            X = df_features[valid_features].fillna(method='ffill').fillna(method='bfill')
            y = df_features['close'].shift(-1).fillna(method='ffill')
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
            X = X.iloc[:-1]
            y = y.iloc[:-1]
            
            self.log_step("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "SUCCESS", f"X: {X.shape}, y: {y.shape}")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            ensemble_model = EnsembleMLModel()
            
            self.log_step("–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏", "START")
            training_start = time.time()
            
            training_metrics = ensemble_model.train(X, y)
            
            training_time = time.time() - training_start
            self.log_step("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "SUCCESS", f"–í—Ä–µ–º—è: {training_time:.2f}—Å")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
            for model_name, metrics in training_metrics.items():
                if isinstance(metrics, dict):
                    accuracy = metrics.get('accuracy', 0)
                    r2 = metrics.get('r2', 0)
                    mae = metrics.get('mae', 0)
                    self.log_step(f"–ú–æ–¥–µ–ª—å {model_name}", "SUCCESS", 
                                f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}%, R¬≤: {r2:.3f}, MAE: {mae:.2f}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            test_sample = X.iloc[-10:].copy()
            predictions = []
            
            for i in range(len(test_sample)):
                pred_price, uncertainty, details = ensemble_model.predict(test_sample.iloc[i:i+1])
                predictions.append({
                    'predicted_price': pred_price,
                    'uncertainty': uncertainty,
                    'actual_price': y.iloc[-(10-i)],
                    'models_used': details['models_used']
                })
                
                self.log_step(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ {i+1}", "SUCCESS", 
                            f"–¶–µ–Ω–∞: {pred_price:.2f}, –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å: ¬±{uncertainty:.2f}")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
            best_accuracy = max([m.get('accuracy', 0) for m in training_metrics.values() if isinstance(m, dict)])
            
            self.test_results['ensemble_model'] = {
                'status': 'SUCCESS',
                'training_time': training_time,
                'best_accuracy': best_accuracy,
                'models_trained': len([m for m in training_metrics.keys() if isinstance(training_metrics[m], dict)]),
                'training_metrics': training_metrics,
                'predictions_tested': len(predictions)
            }
            
            return True
            
        except Exception as e:
            self.log_step("Ensemble –º–æ–¥–µ–ª—å", "ERROR", str(e))
            self.test_results['ensemble_model'] = {'status': 'ERROR', 'error': str(e)}
            return False
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã"""
        self.log_step("üöÄ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ML –°–ò–°–¢–ï–ú–´", "START")
        
        # –¢–µ—Å—Ç 1: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self.test_imports_and_dependencies()
        
        # –¢–µ—Å—Ç 2: Ensemble –º–æ–¥–µ–ª—å
        self.test_ensemble_model()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.generate_final_report()
        
        self.log_step("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û", "SUCCESS", f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {time.time() - self.start_time:.2f}—Å")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        self.log_step("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞", "START")
        
        total_time = time.time() - self.start_time
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        report = f"""
{'='*80}
ü§ñ ADVANCED ML SYSTEM TEST REPORT
{'='*80}
–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        for test_name, result in self.test_results.items():
            status_icon = '‚úÖ' if result.get('status') == 'SUCCESS' else '‚ùå'
            report += f"\n{status_icon} {test_name.replace('_', ' ').title()}: {result.get('status', 'UNKNOWN')}\n"
            
            if result.get('status') == 'SUCCESS':
                if test_name == 'ensemble_model':
                    report += f"   - –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {result.get('training_time', 0):.2f} —Å–µ–∫\n"
                    report += f"   - –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {result.get('best_accuracy', 0):.2f}%\n"
                    report += f"   - –û–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {result.get('models_trained', 0)}\n"
            else:
                report += f"   - –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_tests = sum(1 for r in self.test_results.values() if r.get('status') == 'SUCCESS')
        total_tests = len(self.test_results)
        success_rate = (successful_tests / total_tests) * 100 if total_tests > 0 else 0
        
        report += f"""
{'='*80}
–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}
- –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}
- –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%
- –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥
{'='*80}
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open('test_results/ml_system_test_report.txt', 'w', encoding='utf-8') as f:
            f.write(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('test_results/ml_system_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(self.test_results, f, indent=2, ensure_ascii=False, default=str)
        
        self.log_step("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", "SUCCESS", "test_results/ml_system_test_report.txt")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\n" + "="*80)
        print("üéØ –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("="*80)
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests} ({success_rate:.1f}%)")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: test_results/")
        print("="*80)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML —Å–∏—Å—Ç–µ–º—ã...")
    print("="*80)
    
    tester = MLSystemTester()
    tester.run_comprehensive_test()

if __name__ == "__main__":
    main()
