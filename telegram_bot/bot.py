
import os
import requests
import logging
import asyncio
import tempfile
import matplotlib
from dotenv import load_dotenv
load_dotenv()
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
from telegram.error import BadRequest
import ccxt
import pandas as pd
from threading import Thread
import time
from config import Config
from html import escape


from app import app, db, User, PriceAlert
from notify import send_trend_notification as notify_from_module
from telegram.ext import MessageHandler, filters


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

SYMBOLS = [
    ("BTC/USDT", "–ë–∏—Ç–∫–æ–∏–Ω (BTC)"),
    ("ETH/USDT", "–≠—Ñ–∏—Ä–∏—É–º (ETH)"),
    ("BNB/USDT", "Binance Coin (BNB)")
]
PERIODS = [
    ("1d", "1 –¥–µ–Ω—å"),
    ("1w", "1 –Ω–µ–¥–µ–ª—è"),
    ("1m", "1 –º–µ—Å—è—Ü"),
    ("3m", "3 –º–µ—Å—è—Ü–∞"),
    ("1y", "1 –≥–æ–¥"),
]
MA_CHOICES = [
    ("7,30", "MA7 / MA30 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"),
    ("10,50", "MA10 / MA50"),
    ("20,60", "MA20 / MA60")
]


# ---- –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ app.app_context() ----
def is_subscribed(chat_id):
    user = User.query.filter_by(telegram_chat_id=str(chat_id)).first()
    return user.is_tg_subscribed if user else False

def subscribe(chat_id, symbol, ma):
    user = User.query.filter_by(telegram_chat_id=str(chat_id)).first()
    if not user:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: chat_id={chat_id}, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î")
        return
    user.is_tg_subscribed = True
    user.tg_symbol = symbol
    user.tg_ma = ma
    db.session.commit()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–Ω: {symbol}, {ma}")


def unsubscribe(chat_id):
    user = User.query.filter_by(telegram_chat_id=str(chat_id)).first()
    if not user:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏: chat_id={chat_id}, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î")
        return
    user.is_tg_subscribed = False
    db.session.commit()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø–∏—Å–∞–Ω")


def get_all_subscribers():
    return User.query.filter_by(is_tg_subscribed=True).all()
# --------------------------------------------------------

def get_trend(symbol, period='1d', ma_choice="7,30"):
    try:
        ma_short, ma_long = map(int, ma_choice.split(','))
        exchange = ccxt.binance()
        timeframe_map = {'1d': '15m', '1w': '1h', '1m': '4h', '3m': '1d', '1y': '1d'}
        limit_map = {'1d': 96, '1w': 168, '1m': 180, '3m': 90, '1y': 365}
        timeframe = timeframe_map.get(period, '1h')
        limit = limit_map.get(period, 168)
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
        df = pd.DataFrame(ohlcv, columns=['datetime', 'open', 'high', 'low', 'close', 'volume'])
        df['datetime'] = pd.to_datetime(df['datetime'], unit='ms')
        df[f"MA{ma_short}"] = df['close'].rolling(ma_short).mean()
        df[f"MA{ma_long}"] = df['close'].rolling(ma_long).mean()
        ma_s = df[f"MA{ma_short}"].iloc[-1]
        ma_l = df[f"MA{ma_long}"].iloc[-1]
        last_close = df['close'].iloc[-1]

        if pd.isna(ma_s) or pd.isna(ma_l):
            trend = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            recommendation = "–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        elif ma_s > ma_l:
            trend = "–í–æ—Å—Ö–æ–¥—è—â–∏–π"
            recommendation = "–ü–æ–∫—É–ø–∞—Ç—å –∏–ª–∏ –¥–µ—Ä–∂–∞—Ç—å"
        elif ma_s < ma_l:
            trend = "–ù–∏—Å—Ö–æ–¥—è—â–∏–π"
            recommendation = "–ü—Ä–æ–¥–∞–≤–∞—Ç—å –∏–ª–∏ –Ω–µ –ø–æ–∫—É–ø–∞—Ç—å"
        else:
            trend = "–ë–æ–∫–æ–≤–æ–π"
            recommendation = "–î–µ—Ä–∂–∞—Ç—å"
        return trend, recommendation, round(last_close, 2), df, ma_short, ma_long
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 0, pd.DataFrame(), 0, 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üîé –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞", callback_data='trend')],
        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='subscribe_menu')],
        [InlineKeyboardButton("üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã", callback_data='prices')],
        [InlineKeyboardButton("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data='profile')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data='help')],
        [InlineKeyboardButton("üë®‚Äçüíª –û –±–æ—Ç–µ", callback_data='about')],
        [InlineKeyboardButton("üìå –ê–ª–µ—Ä—Ç—ã –ø–æ —Ü–µ–Ω–µ", callback_data='alerts')]
    ]
    try:
        reply_markup = InlineKeyboardMarkup(keyboard)
        if update.message:
            await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
    except BadRequest as e:
        logger.error(f"BadRequest in show_menu: {e}")
        if "Message is not modified" not in str(e):
            raise


async def menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    chat_id = update.effective_chat.id

    try:
        # ---- –ü–æ–¥–ø–∏—Å–∫–∞ ----
        if data == 'subscribe_menu':
            with app.app_context():
                if is_subscribed(chat_id):
                    await query.edit_message_text(
                        "–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n–•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="unsubscribe")],
                            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]
                        ])
                    )
                else:
                    keyboard = [
                        [InlineKeyboardButton(escape(name), callback_data=f"subscribe_symbol_{symbol}")]
                        for symbol, name in SYMBOLS
                    ]
                    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')])
                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )

        elif data.startswith("subscribe_symbol_"):
            symbol = data.split("_", 2)[2]
            context.user_data['sub_symbol'] = symbol
            keyboard = [
                [InlineKeyboardButton(escape(name), callback_data=f"subscribe_period_{period}")]
                for period, name in PERIODS
            ]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='subscribe_menu')])
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif data.startswith("subscribe_period_"):
            period = data.split("_", 2)[2]
            context.user_data['sub_period'] = period
            keyboard = [
                [InlineKeyboardButton(escape(name), callback_data=f"subscribe_ma_{ma}")]
                for ma, name in MA_CHOICES
            ]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'subscribe_symbol_{context.user_data["sub_symbol"]}')])
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MA –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        elif data.startswith("subscribe_ma_"):
            symbol = context.user_data.get('sub_symbol', SYMBOLS[0][0])
            period = context.user_data.get('sub_period', '1d')
            ma_choice = data.split("_", 2)[2]

            with app.app_context():
                user = User.query.filter_by(telegram_chat_id=str(chat_id)).first()
                if not user:
                    await query.edit_message_text(
                        f"‚ùó –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é.\n\n"
                        f"1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.\n"
                        f"2. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç chat_id:\n"
                        f"<code>{escape(str(chat_id))}</code>\n"
                        f"3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram.",
                        parse_mode="HTML",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]])
                    )
                    return

                user.is_tg_subscribed = True
                user.tg_symbol = symbol
                user.tg_ma = ma_choice
                user.tg_period = period
                db.session.commit()

            await query.edit_message_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
                f"–ë—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ {escape(dict(SYMBOLS).get(symbol, symbol))} "
                f"({escape(dict(PERIODS).get(period, period))}, {escape(ma_choice)})",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]])
            )

        elif data == "unsubscribe":
            unsubscribe(chat_id)
            await query.edit_message_text(
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]])
            )

        # ---- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ ----
        elif data == 'trend':
            keyboard = [[InlineKeyboardButton(escape(name), callback_data=f"symbol_{symbol}")] for symbol, name in SYMBOLS]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data.startswith("symbol_"):
            symbol = data.split("_", 1)[1]
            context.user_data['symbol'] = symbol
            keyboard = [[InlineKeyboardButton(escape(name), callback_data=f"period_{period}")] for period, name in PERIODS]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='trend')])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data.startswith("period_"):
            symbol = context.user_data.get('symbol', SYMBOLS[0][0])
            period = data.split("_", 1)[1]
            context.user_data['period'] = period
            keyboard = [[InlineKeyboardButton(escape(name), callback_data=f"ma_{ma}")] for ma, name in MA_CHOICES]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"symbol_{symbol}")])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–æ–ª—å–∑—è—â–∏—Ö MA:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data.startswith("ma_"):
            symbol = context.user_data.get('symbol', SYMBOLS[0][0])
            period = context.user_data.get('period', '1d')
            ma_choice = data.split("_", 1)[1]
            trend, recommendation, price, df, ma_s, ma_l = await asyncio.to_thread(get_trend, symbol, period, ma_choice)
            period_text = escape(dict(PERIODS).get(period, period))
            name = escape(dict(SYMBOLS).get(symbol, symbol))
            ma_label = f"MA{ma_s}/MA{ma_l}"

            message = (
                f'üìä <b>{name}</b> –∑–∞ –ø–µ—Ä–∏–æ–¥ <b>{period_text}</b> ({ma_label}):\n'
                f'<b>–¶–µ–Ω–∞</b>: ${price}\n'
                f'<b>–¢—Ä–µ–Ω–¥</b>: {escape(trend)}\n'
                f'<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è</b>: {escape(recommendation)}'
            )

            if df.empty or len(df) < max(ma_s, ma_l):
                await query.edit_message_text(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='trend')]])
                )
                return

            with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
                plt.figure(figsize=(9, 5))
                plt.plot(df['datetime'], df['close'], label='–¶–µ–Ω–∞')
                plt.plot(df['datetime'], df[f"MA{ma_s}"], label=f'MA{ma_s}')
                plt.plot(df['datetime'], df[f"MA{ma_l}"], label=f'MA{ma_l}')
                plt.title(f"{name} ‚Äî {period_text} ({ma_label})")
                plt.xlabel('–î–∞—Ç–∞')
                plt.ylabel('–¶–µ–Ω–∞, $')
                plt.legend()
                plt.tight_layout()
                plt.grid(alpha=0.2)
                plt.savefig(tmpfile.name)
                plt.close()
                tmpfile_path = tmpfile.name

            with open(tmpfile_path, 'rb') as img:
                await query.message.reply_photo(photo=InputFile(img), caption=message, parse_mode="HTML")

            try:
                os.remove(tmpfile_path)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

            await show_menu(update, context)

        # ---- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã ----
        elif data == 'prices':
            exchange = ccxt.binance()
            prices = []
            for symbol, name in SYMBOLS:
                try:
                    ticker = exchange.fetch_ticker(symbol)
                    prices.append(f"{escape(name)}: <b>${ticker['last']}</b>")
                except Exception:
                    prices.append(f"{escape(name)}: <i>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã</i>")
            await query.edit_message_text(
                "üìà <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã:</b>\n" + "\n".join(prices),
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]])
            )

        # ---- –ü–æ–º–æ—â—å ----
        elif data == 'help':
            await query.edit_message_text(
                "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                "1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ ‚Äî –ø–æ—à–∞–≥–æ–≤–æ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É, –ø–µ—Ä–∏–æ–¥ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MA.\n"
                "2. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –∏ MA –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤.\n"
                "3. –ü–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫, —Ç—Ä–µ–Ω–¥ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é.\n"
                "4. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ‚Äî –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]])
            )

        # ---- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ----
        elif data == 'profile':
            with app.app_context():
                user = User.query.filter_by(telegram_chat_id=str(chat_id)).first()
                if user:
                    sub_status = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω" if user.is_tg_subscribed else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
                    symbol = escape(user.tg_symbol) if user.tg_symbol else "‚Äî"
                    ma = escape(user.tg_ma) if user.tg_ma else "‚Äî"
                    period = escape(getattr(user, "tg_period", "1d"))
                    name = escape(user.full_name) if getattr(user, "full_name", None) else "‚Äî"
                    msg = (
                        f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n"
                        f"<b>–ò–º—è:</b> {name}\n"
                        f"<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> {sub_status}\n"
                        f"<b>–ü–∞—Ä–∞:</b> {symbol}\n"
                        f"<b>MA:</b> {ma}\n"
                        f"<b>–ü–µ—Ä–∏–æ–¥:</b> {period}\n"
                        f"<b>–í–∞—à chat_id:</b> <code>{escape(str(chat_id))}</code>"
                    )
                else:
                    msg = (
                        f"<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n"
                        f"–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                        f"–í–∞—à chat_id: <code>{escape(str(chat_id))}</code>"
                    )
                await query.edit_message_text(msg, parse_mode="HTML",
                                              reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]]))
            return

        # ---- –û –±–æ—Ç–µ ----
        elif data == 'about':
            await query.edit_message_text(
                "ü§ñ <b>CryptoBot</b> ‚Äî —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≥—Ä–∞—Ñ–∏–∫–∏, —Ç—Ä–µ–Ω–¥—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Äî –≤—Å—ë –Ω–∞ —Ä—É—Å—Å–∫–æ–º!\n\n"
                "<i>–ê–≤—Ç–æ—Ä: 2025</i>",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')]])
            )

        elif data == 'menu':
            await show_menu(update, context)

        # ---- –ê–ª–µ—Ä—Ç—ã ----
        elif data == "alerts":
            keyboard = [[InlineKeyboardButton(escape(name), callback_data=f"alert_symbol_{symbol}")] for symbol, name in SYMBOLS]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='menu')])
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –∞–ª–µ—Ä—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data.startswith("alert_symbol_"):
            symbol = data.split("_", 2)[2]
            context.user_data['alert_symbol'] = symbol
            await query.edit_message_text(
                "–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                f"<code>{escape('> 70000')}</code> ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—à–µ 70k\n"
                f"<code>{escape('< 60000')}</code> ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ 60k",
                parse_mode="HTML"
            )
            context.user_data['awaiting_alert_price'] = True

    except BadRequest as e:
        logger.error(f"BadRequest in menu_callback: {e}")
        if "Message is not modified" not in str(e):
            raise



async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.\n'
        '–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help.'
    )

def send_trend_notification_local(symbol, trend, recommendation, price, chat_id, period='1d', ma_choice="7,30"):
    token = Config.TELEGRAM_BOT_TOKEN
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return

    name = dict(SYMBOLS).get(symbol, symbol)
    ma_label = f"MA{ma_choice.replace(',', '/MA')}"
    text = (
        f"üìä –¢—Ä–µ–Ω–¥ –ø–æ {name} ({ma_label}):\n"
        f"–¶–µ–Ω–∞: ${price}\n"
        f"–¢—Ä–µ–Ω–¥: {trend}\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}"
    )

    url = f"https://api.telegram.org/bot{token}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {chat_id}: {e}")

def notification_daemon():
    with app.app_context():
        while True:
            try:
                for user in get_all_subscribers():
                    symbol = user.tg_symbol
                    ma_choice = user.tg_ma
                    chat_id = user.telegram_chat_id
                    trend, recommendation, price, _, _, _ = get_trend(symbol, user.tg_period, ma_choice)
                    send_trend_notification_local(symbol, trend, recommendation, price, chat_id, user.tg_period, ma_choice)
            except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {chat_id}: {e}")
            time.sleep(6*60*60)  # –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_alert_price'):
        chat_id = update.effective_chat.id
        symbol = context.user_data['alert_symbol']
        text = update.message.text.strip()
        if text.startswith(">") or text.startswith("<"):
            condition = text[0]
            try:
                target_price = float(text[1:].strip())
                with app.app_context():
                    alert = PriceAlert(chat_id=str(chat_id), symbol=symbol,
                                       condition=condition, target_price=target_price)
                    db.session.add(alert)
                    db.session.commit()
                await update.message.reply_text(
                    f"‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {symbol} {condition} {target_price}",
                    parse_mode="HTML"
                )
            except ValueError:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞.")
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '> 70000' –∏–ª–∏ '< 2000'.")
        context.user_data['awaiting_alert_price'] = False

def price_alert_daemon():
    exchange = ccxt.binance()
    while True:
        with app.app_context():

            alerts = PriceAlert.query.filter_by(is_triggered=False).all()
            for alert in alerts:
                try:
                    ticker = exchange.fetch_ticker(alert.symbol)
                    last_price = ticker['last']
                    if (alert.condition == ">" and last_price > alert.target_price) or \
                       (alert.condition == "<" and last_price < alert.target_price):
                        from notify import send_trend_notification
                        send_trend_notification(
                            symbol=alert.symbol,
                            trend="–ê–ª–µ—Ä—Ç –ø–æ —Ü–µ–Ω–µ",
                            recommendation=f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ —É—Å–ª–æ–≤–∏–µ {alert.condition} {alert.target_price}",
                            price=last_price,
                            chat_id=alert.chat_id
                        )
                        alert.is_triggered = True
                        db.session.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        time.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É



def main():
    if not Config.TELEGRAM_BOT_TOKEN:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
        return

    # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    Thread(target=notification_daemon, daemon=True).start()
    Thread(target=price_alert_daemon, daemon=True).start()

    telegram_app = ApplicationBuilder().token(Config.TELEGRAM_BOT_TOKEN).build()

    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    telegram_app.add_handler(CommandHandler('start', start))
    telegram_app.add_handler(CommandHandler('menu', show_menu))
    telegram_app.add_handler(CommandHandler('help', help_command))
    telegram_app.add_handler(CallbackQueryHandler(menu_callback))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    telegram_app.run_polling()

if __name__ == '__main__':
    with app.app_context():
        main()
