#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π SQLite –±–∞–∑—ã –≤ PostgreSQL
"""

import os
import sys
import sqlite3
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import create_app, db
from app.models import User, PriceAlert, CryptoData, TradingSession, SystemMetrics


class DatabaseMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL"""
    
    def __init__(self):
        self.sqlite_path = None
        self.postgres_config = None
        self.app = None
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        # –ü–æ–∏—Å–∫ SQLite –±–∞–∑—ã
        possible_paths = [
            'instance/app.db',
            'app.db',
            os.path.join(os.path.dirname(__file__), 'instance', 'app.db')
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                self.sqlite_path = path
                break
        
        if not self.sqlite_path:
            print("‚ùå SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ SQLite –±–∞–∑–∞: {self.sqlite_path}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.postgres_config = {
            'host': os.getenv('POSTGRES_HOST', 'localhost'),
            'port': os.getenv('POSTGRES_PORT', '5432'),
            'database': os.getenv('POSTGRES_DB', 'crypto_platform'),
            'user': os.getenv('POSTGRES_USER', 'postgres'),
            'password': os.getenv('POSTGRES_PASSWORD', 'password')
        }
        
        return True
    
    def test_postgresql_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            conn = psycopg2.connect(**self.postgres_config)
            conn.close()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return False
    
    def create_postgresql_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã
            temp_config = self.postgres_config.copy()
            temp_config['database'] = 'postgres'
            
            conn = psycopg2.connect(**temp_config)
            conn.autocommit = True
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã
            cursor.execute(
                "SELECT 1 FROM pg_database WHERE datname = %s",
                (self.postgres_config['database'],)
            )
            
            if not cursor.fetchone():
                cursor.execute(f"CREATE DATABASE {self.postgres_config['database']}")
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {self.postgres_config['database']} —Å–æ–∑–¥–∞–Ω–∞")
            else:
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {self.postgres_config['database']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            cursor.close()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def setup_flask_app(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PostgreSQL"""
        os.environ['DATABASE_URL'] = (
            f"postgresql://{self.postgres_config['user']}:"
            f"{self.postgres_config['password']}@"
            f"{self.postgres_config['host']}:"
            f"{self.postgres_config['port']}/"
            f"{self.postgres_config['database']}"
        )
        
        self.app = create_app('production')
        return True
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL"""
        try:
            with self.app.app_context():
                db.create_all()
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã PostgreSQL —Å–æ–∑–¥–∞–Ω—ã")
                return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return False
    
    def get_sqlite_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite"""
        try:
            conn = sqlite3.connect(self.sqlite_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            data = {}
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            for table in tables:
                if table.startswith('sqlite_'):
                    continue
                    
                cursor.execute(f"SELECT * FROM {table}")
                rows = cursor.fetchall()
                data[table] = [dict(row) for row in rows]
                print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table}: {len(rows)} –∑–∞–ø–∏—Å–µ–π")
            
            conn.close()
            return data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è SQLite: {e}")
            return None
    
    def migrate_users(self, users_data):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not users_data:
            return True
            
        try:
            with self.app.app_context():
                for user_data in users_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    existing_user = User.query.filter_by(
                        username=user_data['username']
                    ).first()
                    
                    if existing_user:
                        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = User(
                        username=user_data['username'],
                        email=user_data['email'],
                        password_hash=user_data['password_hash'],
                        role=user_data.get('role', 'user'),
                        is_active=user_data.get('is_active', True),
                        full_name=user_data.get('full_name', ''),
                        created_at=datetime.fromisoformat(user_data['created_at']) if user_data.get('created_at') else datetime.utcnow()
                    )
                    
                    db.session.add(user)
                
                db.session.commit()
                print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            db.session.rollback()
            return False
    
    def migrate_crypto_data(self, crypto_data):
        """–ú–∏–≥—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not crypto_data:
            return True
            
        try:
            with self.app.app_context():
                for data in crypto_data:
                    existing_data = CryptoData.query.filter_by(
                        symbol=data['symbol'],
                        timestamp=datetime.fromisoformat(data['timestamp'])
                    ).first()
                    
                    if existing_data:
                        continue
                    
                    crypto_record = CryptoData(
                        symbol=data['symbol'],
                        price=float(data['price']),
                        volume=float(data.get('volume', 0)),
                        market_cap=float(data.get('market_cap', 0)),
                        timestamp=datetime.fromisoformat(data['timestamp'])
                    )
                    
                    db.session.add(crypto_record)
                
                db.session.commit()
                print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(crypto_data)} –∑–∞–ø–∏—Å–µ–π –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö: {e}")
            db.session.rollback()
            return False
    
    def migrate_price_alerts(self, alerts_data):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not alerts_data:
            return True
            
        try:
            with self.app.app_context():
                for alert_data in alerts_data:
                    existing_alert = PriceAlert.query.filter_by(
                        user_id=alert_data['user_id'],
                        symbol=alert_data['symbol'],
                        target_price=float(alert_data['target_price'])
                    ).first()
                    
                    if existing_alert:
                        continue
                    
                    alert = PriceAlert(
                        user_id=alert_data['user_id'],
                        symbol=alert_data['symbol'],
                        target_price=float(alert_data['target_price']),
                        condition=alert_data.get('condition', 'above'),
                        is_active=alert_data.get('is_active', True),
                        created_at=datetime.fromisoformat(alert_data['created_at']) if alert_data.get('created_at') else datetime.utcnow()
                    )
                    
                    db.session.add(alert)
                
                db.session.commit()
                print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(alerts_data)} —Ü–µ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            db.session.rollback()
            return False
    
    def create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ SQLite –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π"""
        try:
            backup_dir = Path('backups')
            backup_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            backup_path = backup_dir / f'sqlite_backup_{timestamp}.db'
            
            import shutil
            shutil.copy2(self.sqlite_path, backup_path)
            
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return False
    
    def run_migration(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏"""
        print("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ SQLite –≤ PostgreSQL")
        print("=" * 50)
        
        # –®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        if not self.setup_connections():
            return False
        
        # –®–∞–≥ 2: –¢–µ—Å—Ç PostgreSQL
        if not self.test_postgresql_connection():
            return False
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not self.create_postgresql_database():
            return False
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        if not self.create_backup():
            return False
        
        # –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not self.setup_flask_app():
            return False
        
        # –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        if not self.create_tables():
            return False
        
        # –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
        print("\nüì• –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite...")
        sqlite_data = self.get_sqlite_data()
        if sqlite_data is None:
            return False
        
        # –®–∞–≥ 8: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\nüì§ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...")
        
        success = True
        
        if 'users' in sqlite_data:
            success &= self.migrate_users(sqlite_data['users'])
        
        if 'crypto_data' in sqlite_data:
            success &= self.migrate_crypto_data(sqlite_data['crypto_data'])
        
        if 'price_alerts' in sqlite_data:
            success &= self.migrate_price_alerts(sqlite_data['price_alerts'])
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        
        if success:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PostgreSQL")
            print("üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        else:
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        
        return success


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    migrator = DatabaseMigrator()
    
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ PostgreSQL")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == '--force':
        print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è (--force)")
    else:
        response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ")
        if response.lower() not in ['y', 'yes', '–¥–∞']:
            print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    success = migrator.run_migration()
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û–±–Ω–æ–≤–∏—Ç–µ DATABASE_URL –≤ .env —Ñ–∞–π–ª–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python run.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        print("4. –£–¥–∞–ª–∏—Ç–µ SQLite —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == '__main__':
    main()
