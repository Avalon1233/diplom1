# app/services/sentiment_service.py
"""
Sentiment Analysis Service - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""

import os
import requests
import time
import json
import re
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import logging
from flask import current_app

try:
    from textblob import TextBlob
    from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
    SENTIMENT_AVAILABLE = True
except ImportError:
    SENTIMENT_AVAILABLE = False

try:
    from newsapi import NewsApiClient
    NEWS_API_AVAILABLE = True
except ImportError:
    NEWS_API_AVAILABLE = False


class SentimentAnalysisService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
    """
    
    def __init__(self):
        self.vader_analyzer = SentimentIntensityAnalyzer() if SENTIMENT_AVAILABLE else None
        self.news_api = None
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ News API (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)
        news_api_key = os.getenv('NEWS_API_KEY')
        if NEWS_API_AVAILABLE and news_api_key:
            try:
                self.news_api = NewsApiClient(api_key=news_api_key)
            except Exception as e:
                current_app.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å News API: {e}")
    
    def get_crypto_sentiment(self, symbol: str, days: int = 7) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–∏–π sentiment –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTC', 'ETH')
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ sentiment
        """
        if not SENTIMENT_AVAILABLE:
            current_app.logger.warning("Sentiment analysis –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return self._get_default_sentiment()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
            news_sentiment = self._analyze_news_sentiment(symbol, days)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Reddit/Twitter API)
            social_sentiment = self._analyze_social_sentiment(symbol, days)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            combined_sentiment = self._combine_sentiments(news_sentiment, social_sentiment)
            
            current_app.logger.info(f"üì∞ Sentiment –¥–ª—è {symbol}: {combined_sentiment['overall']:.3f}")
            return combined_sentiment
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ sentiment –¥–ª—è {symbol}: {e}")
            return self._get_default_sentiment()
    
    def _analyze_news_sentiment(self, symbol: str, days: int) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ sentiment –∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if not self.news_api:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            return self._get_mock_news_sentiment(symbol)
        
        try:
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            from_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            crypto_names = {
                'BTC': ['Bitcoin', 'BTC'],
                'ETH': ['Ethereum', 'ETH'],
                'BNB': ['Binance', 'BNB'],
                'ADA': ['Cardano', 'ADA'],
                'SOL': ['Solana', 'SOL']
            }
            
            keywords = crypto_names.get(symbol.upper(), [symbol])
            query = ' OR '.join(keywords)
            
            articles = self.news_api.get_everything(
                q=query,
                from_param=from_date,
                language='en',
                sort_by='relevancy',
                page_size=50
            )
            
            if not articles['articles']:
                return self._get_mock_news_sentiment(symbol)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º sentiment –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
            sentiments = []
            for article in articles['articles']:
                text = f"{article.get('title', '')} {article.get('description', '')}"
                if text.strip():
                    sentiment = self._analyze_text_sentiment(text)
                    sentiments.append(sentiment)
            
            if not sentiments:
                return self._get_mock_news_sentiment(symbol)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            avg_sentiment = sum(sentiments) / len(sentiments)
            
            return {
                'sentiment': avg_sentiment,
                'articles_count': len(sentiments),
                'source': 'news_api'
            }
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return self._get_mock_news_sentiment(symbol)
    
    def _analyze_social_sentiment(self, symbol: str, days: int) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑ sentiment –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ Twitter/Reddit API
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        
        import random
        random.seed(hash(symbol) + int(time.time() / 86400))  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        base_sentiments = {
            'BTC': 0.1,   # –û–±—ã—á–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
            'ETH': 0.05,  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ-–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
            'BNB': 0.0,   # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
            'ADA': -0.05, # –°–ª–µ–≥–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π
            'SOL': 0.15   # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π
        }
        
        base = base_sentiments.get(symbol.upper(), 0.0)
        noise = random.uniform(-0.2, 0.2)  # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
        
        return {
            'sentiment': max(-1.0, min(1.0, base + noise)),
            'posts_count': random.randint(50, 200),
            'source': 'social_mock'
        }
    
    def _analyze_text_sentiment(self, text: str) -> float:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç sentiment —Ç–µ–∫—Å—Ç–∞"""
        if not text or not SENTIMENT_AVAILABLE:
            return 0.0
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º VADER –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ (–ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–ª–µ–Ω–≥–æ–º)
            vader_scores = self.vader_analyzer.polarity_scores(text)
            vader_sentiment = vader_scores['compound']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextBlob –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
            blob = TextBlob(text)
            textblob_sentiment = blob.sentiment.polarity
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (VADER –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤)
            combined = 0.7 * vader_sentiment + 0.3 * textblob_sentiment
            
            return max(-1.0, min(1.0, combined))
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
            return 0.0
    
    def _combine_sentiments(self, news_sentiment: Dict, social_sentiment: Dict) -> Dict[str, float]:
        """–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç sentiment –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        news_weight = 0.6
        social_weight = 0.4
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π sentiment
        overall = (
            news_sentiment['sentiment'] * news_weight +
            social_sentiment['sentiment'] * social_weight
        )
        
        return {
            'overall': overall,
            'news_sentiment': news_sentiment['sentiment'],
            'social_sentiment': social_sentiment['sentiment'],
            'news_articles': news_sentiment.get('articles_count', 0),
            'social_posts': social_sentiment.get('posts_count', 0),
            'confidence': self._calculate_confidence(news_sentiment, social_sentiment)
        }
    
    def _calculate_confidence(self, news_sentiment: Dict, social_sentiment: Dict) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ sentiment –∞–Ω–∞–ª–∏–∑–µ"""
        
        # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = 0.5
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        if news_sentiment.get('articles_count', 0) > 10:
            confidence += 0.2
        
        if social_sentiment.get('posts_count', 0) > 50:
            confidence += 0.2
        
        # –£–º–µ–Ω—å—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
        sentiment_diff = abs(news_sentiment['sentiment'] - social_sentiment['sentiment'])
        if sentiment_diff > 0.5:
            confidence -= 0.3
        
        return max(0.1, min(1.0, confidence))
    
    def _get_mock_news_sentiment(self, symbol: str) -> Dict[str, float]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è news sentiment"""
        import random
        random.seed(hash(symbol) + int(time.time() / 86400))
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        base_sentiments = {
            'BTC': 0.15,
            'ETH': 0.1,
            'BNB': 0.05,
            'ADA': 0.0,
            'SOL': 0.2
        }
        
        base = base_sentiments.get(symbol.upper(), 0.0)
        noise = random.uniform(-0.15, 0.15)
        
        return {
            'sentiment': max(-1.0, min(1.0, base + noise)),
            'articles_count': random.randint(10, 30),
            'source': 'mock'
        }
    
    def _get_default_sentiment(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π sentiment –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'overall': 0.0,
            'news_sentiment': 0.0,
            'social_sentiment': 0.0,
            'news_articles': 0,
            'social_posts': 0,
            'confidence': 0.1
        }
    
    def get_sentiment_features(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç sentiment –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML –º–æ–¥–µ–ª–∏
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ feature engineering
        """
        sentiment_data = self.get_crypto_sentiment(symbol)
        
        return {
            'sentiment_overall': sentiment_data['overall'],
            'sentiment_news': sentiment_data['news_sentiment'],
            'sentiment_social': sentiment_data['social_sentiment'],
            'sentiment_confidence': sentiment_data['confidence'],
            'sentiment_news_volume': min(sentiment_data['news_articles'] / 50.0, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            'sentiment_social_volume': min(sentiment_data['social_posts'] / 200.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        }
    
    def get_enhanced_sentiment_features(self, symbol: str, days: int = 7) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ sentiment –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ sentiment –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π sentiment
            base_sentiment = self.get_crypto_sentiment(symbol, days)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é Reddit –∏ Twitter sentiment
            reddit_sentiment = self._get_reddit_sentiment_mock(symbol)
            twitter_sentiment = self._get_twitter_sentiment_mock(symbol)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            weighted_sentiment = (
                base_sentiment['overall'] * 0.4 +
                reddit_sentiment * 0.35 +
                twitter_sentiment * 0.25
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º momentum –∏ volatility
            sentiment_momentum = self._calculate_sentiment_momentum_mock(symbol)
            sentiment_volatility = abs(base_sentiment['overall'] - reddit_sentiment) + abs(reddit_sentiment - twitter_sentiment)
            sentiment_volatility = min(sentiment_volatility / 2.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            
            return {
                'sentiment_overall': weighted_sentiment,
                'sentiment_news': base_sentiment['news_sentiment'],
                'sentiment_reddit': reddit_sentiment,
                'sentiment_twitter': twitter_sentiment,
                'sentiment_momentum': sentiment_momentum,
                'sentiment_volatility': sentiment_volatility,
                'sentiment_confidence': base_sentiment['confidence'] * 1.2,  # –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
                'news_volume': base_sentiment['news_articles'],
                'reddit_volume': self._get_reddit_volume_mock(),
                'twitter_volume': self._get_twitter_volume_mock()
            }
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö sentiment –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}: {e}")
            return self._get_default_enhanced_sentiment()
    
    def _get_reddit_sentiment_mock(self, symbol: str) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Reddit sentiment —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        import random
        import hashlib
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º hash —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        seed = int(hashlib.md5(symbol.encode()).hexdigest()[:8], 16)
        random.seed(seed)
        
        # Reddit –æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        if symbol.upper() in ['BTC', 'ETH']:
            base_sentiment = random.uniform(0.1, 0.4)
        elif symbol.upper() in ['BNB', 'ADA', 'DOT']:
            base_sentiment = random.uniform(-0.1, 0.3)
        else:
            base_sentiment = random.uniform(-0.2, 0.2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
        noise = random.uniform(-0.1, 0.1)
        return max(-1.0, min(1.0, base_sentiment + noise))
    
    def _get_twitter_sentiment_mock(self, symbol: str) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Twitter sentiment (–æ–±—ã—á–Ω–æ –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π)"""
        import random
        import hashlib
        
        seed = int(hashlib.md5(f"{symbol}_twitter".encode()).hexdigest()[:8], 16)
        random.seed(seed)
        
        # Twitter –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π
        base_sentiment = random.uniform(-0.3, 0.3)
        volatility_factor = random.uniform(0.8, 1.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        
        return max(-1.0, min(1.0, base_sentiment * volatility_factor))
    
    def _calculate_sentiment_momentum_mock(self, symbol: str) -> float:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è sentiment momentum"""
        import random
        import hashlib
        
        seed = int(hashlib.md5(f"{symbol}_momentum".encode()).hexdigest()[:8], 16)
        random.seed(seed)
        
        # Momentum –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
        return random.uniform(-0.5, 0.5)
    
    def _get_reddit_volume_mock(self) -> int:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞ Reddit –ø–æ—Å—Ç–æ–≤"""
        import random
        return random.randint(15, 80)
    
    def _get_twitter_volume_mock(self) -> int:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ–±—ä–µ–º–∞ Twitter –ø–æ—Å—Ç–æ–≤"""
        import random
        return random.randint(50, 300)
    
    def _get_default_enhanced_sentiment(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ sentiment –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        return {
            'sentiment_overall': 0.0,
            'sentiment_news': 0.0,
            'sentiment_reddit': 0.0,
            'sentiment_twitter': 0.0,
            'sentiment_momentum': 0.0,
            'sentiment_volatility': 0.5,
            'sentiment_confidence': 0.1,
            'news_volume': 0,
            'reddit_volume': 0,
            'twitter_volume': 0
        }
