# app/services/macro_indicators_service.py
"""
–ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ ML-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–í–∫–ª—é—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏, –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏, –∏ –¥—Ä—É–≥–∏–µ –º–∞–∫—Ä–æ-—Ñ–∞–∫—Ç–æ—Ä—ã
"""

import os
import requests
import time
import json
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
import logging
from flask import current_app
import numpy as np


class MacroIndicatorsService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    """
    
    def __init__(self):
        self.cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        
    def get_macro_features(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"macro_{symbol}"
            if self._is_cache_valid(cache_key):
                return self.cache[cache_key]['data']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            fear_greed = self._get_fear_greed_index()
            market_dominance = self._get_market_dominance(symbol)
            correlation_metrics = self._get_correlation_metrics(symbol)
            volatility_metrics = self._get_volatility_metrics(symbol)
            liquidity_metrics = self._get_liquidity_metrics(symbol)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            macro_features = {
                **fear_greed,
                **market_dominance,
                **correlation_metrics,
                **volatility_metrics,
                **liquidity_metrics
            }
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cache[cache_key] = {
                'data': macro_features,
                'timestamp': time.time()
            }
            
            current_app.logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(macro_features)} –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}")
            return macro_features
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}: {e}")
            return self._get_default_macro_features()
    
    def _get_fear_greed_index(self) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ (Fear & Greed Index)
        –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API alternative.me
        """
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è Fear & Greed Index (0-100)
            import random
            import hashlib
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            seed = int(hashlib.md5(today.encode()).hexdigest()[:8], 16)
            random.seed(seed)
            
            # Fear & Greed –æ–±—ã—á–Ω–æ –∫–æ–ª–µ–±–ª–µ—Ç—Å—è –º–µ–∂–¥—É 10-90
            current_fgi = random.randint(15, 85)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è momentum
            yesterday_fgi = current_fgi + random.randint(-15, 15)
            week_ago_fgi = current_fgi + random.randint(-25, 25)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (0-100 -> 0-1)
            return {
                'fear_greed_index': current_fgi / 100.0,
                'fear_greed_momentum_1d': (current_fgi - yesterday_fgi) / 100.0,
                'fear_greed_momentum_7d': (current_fgi - week_ago_fgi) / 100.0,
                'fear_greed_volatility': abs(current_fgi - yesterday_fgi) / 100.0
            }
            
        except Exception as e:
            current_app.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Fear & Greed Index: {e}")
            return {
                'fear_greed_index': 0.5,
                'fear_greed_momentum_1d': 0.0,
                'fear_greed_momentum_7d': 0.0,
                'fear_greed_volatility': 0.1
            }
    
    def _get_market_dominance(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
        """
        try:
            import random
            import hashlib
            
            seed = int(hashlib.md5(f"{symbol}_dominance".encode()).hexdigest()[:8], 16)
            random.seed(seed)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ BTC (–æ–±—ã—á–Ω–æ 40-70%)
            btc_dominance = random.uniform(0.4, 0.7)
            
            # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ETH (–æ–±—ã—á–Ω–æ 15-25%)
            eth_dominance = random.uniform(0.15, 0.25)
            
            # –î–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ø-10 (–æ–±—ã—á–Ω–æ 80-95%)
            top10_dominance = random.uniform(0.8, 0.95)
            
            # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞
            if symbol.upper() == 'BTC':
                symbol_dominance = btc_dominance
            elif symbol.upper() == 'ETH':
                symbol_dominance = eth_dominance
            else:
                symbol_dominance = random.uniform(0.001, 0.05)  # –ê–ª—å—Ç–∫–æ–∏–Ω—ã
            
            return {
                'btc_dominance': btc_dominance,
                'eth_dominance': eth_dominance,
                'top10_dominance': top10_dominance,
                'symbol_dominance': symbol_dominance,
                'altcoin_season_indicator': 1.0 - btc_dominance  # –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            }
            
        except Exception as e:
            current_app.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è market dominance –¥–ª—è {symbol}: {e}")
            return {
                'btc_dominance': 0.5,
                'eth_dominance': 0.2,
                'top10_dominance': 0.85,
                'symbol_dominance': 0.01,
                'altcoin_season_indicator': 0.5
            }
    
    def _get_correlation_metrics(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
        """
        try:
            import random
            import hashlib
            
            seed = int(hashlib.md5(f"{symbol}_correlation".encode()).hexdigest()[:8], 16)
            random.seed(seed)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –Ω–∏–∑–∫—É—é –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
            
            correlations = {
                'correlation_sp500': random.uniform(-0.3, 0.4),      # S&P 500
                'correlation_gold': random.uniform(-0.2, 0.3),       # –ó–æ–ª–æ—Ç–æ
                'correlation_dxy': random.uniform(-0.4, 0.2),        # –î–æ–ª–ª–∞—Ä –°–®–ê
                'correlation_vix': random.uniform(-0.1, 0.5),        # VIX (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
                'correlation_bonds': random.uniform(-0.3, 0.1),      # –û–±–ª–∏–≥–∞—Ü–∏–∏
                'correlation_oil': random.uniform(-0.2, 0.3),        # –ù–µ—Ñ—Ç—å
                'correlation_btc': 1.0 if symbol.upper() == 'BTC' else random.uniform(0.6, 0.9)  # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
            correlations['correlation_stability'] = 1.0 - np.std(list(correlations.values()))
            correlations['max_correlation'] = max(abs(v) for v in correlations.values() if v != 1.0)
            
            return correlations
            
        except Exception as e:
            current_app.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è correlation metrics –¥–ª—è {symbol}: {e}")
            return {
                'correlation_sp500': 0.0,
                'correlation_gold': 0.0,
                'correlation_dxy': 0.0,
                'correlation_vix': 0.0,
                'correlation_bonds': 0.0,
                'correlation_oil': 0.0,
                'correlation_btc': 0.8,
                'correlation_stability': 0.5,
                'max_correlation': 0.3
            }
    
    def _get_volatility_metrics(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
        """
        try:
            import random
            import hashlib
            
            seed = int(hashlib.md5(f"{symbol}_volatility".encode()).hexdigest()[:8], 16)
            random.seed(seed)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            base_volatility = random.uniform(0.02, 0.08)  # 2-8% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            
            return {
                'market_volatility_1d': base_volatility,
                'market_volatility_7d': base_volatility * random.uniform(0.8, 1.2),
                'market_volatility_30d': base_volatility * random.uniform(0.7, 1.3),
                'volatility_trend': random.uniform(-0.5, 0.5),  # –¢—Ä–µ–Ω–¥ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                'volatility_percentile': random.uniform(0.1, 0.9),  # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                'implied_volatility': base_volatility * random.uniform(1.1, 1.5)  # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            }
            
        except Exception as e:
            current_app.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è volatility metrics –¥–ª—è {symbol}: {e}")
            return {
                'market_volatility_1d': 0.04,
                'market_volatility_7d': 0.04,
                'market_volatility_30d': 0.04,
                'volatility_trend': 0.0,
                'volatility_percentile': 0.5,
                'implied_volatility': 0.05
            }
    
    def _get_liquidity_metrics(self, symbol: str) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞
        """
        try:
            import random
            import hashlib
            
            seed = int(hashlib.md5(f"{symbol}_liquidity".encode()).hexdigest()[:8], 16)
            random.seed(seed)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
            # –ë–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–º–µ—é—Ç –ª—É—á—à—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            if symbol.upper() in ['BTC', 'ETH']:
                base_liquidity = random.uniform(0.7, 0.95)
            elif symbol.upper() in ['BNB', 'ADA', 'DOT']:
                base_liquidity = random.uniform(0.5, 0.8)
            else:
                base_liquidity = random.uniform(0.2, 0.6)
            
            return {
                'market_liquidity': base_liquidity,
                'bid_ask_spread': (1.0 - base_liquidity) * 0.01,  # –û–±—Ä–∞—Ç–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
                'order_book_depth': base_liquidity,
                'trading_volume_ratio': base_liquidity * random.uniform(0.8, 1.2),
                'liquidity_trend': random.uniform(-0.2, 0.2),
                'exchange_flow_ratio': random.uniform(0.3, 0.7)  # –û—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏—Ç–æ–∫–∞/–æ—Ç—Ç–æ–∫–∞ —Å –±–∏—Ä–∂
            }
            
        except Exception as e:
            current_app.logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è liquidity metrics –¥–ª—è {symbol}: {e}")
            return {
                'market_liquidity': 0.5,
                'bid_ask_spread': 0.005,
                'order_book_depth': 0.5,
                'trading_volume_ratio': 0.5,
                'liquidity_trend': 0.0,
                'exchange_flow_ratio': 0.5
            }
    
    def _is_cache_valid(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞"""
        if cache_key not in self.cache:
            return False
        
        cache_age = time.time() - self.cache[cache_key]['timestamp']
        return cache_age < self.cache_ttl
    
    def _get_default_macro_features(self) -> Dict[str, float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        return {
            # Fear & Greed Index
            'fear_greed_index': 0.5,
            'fear_greed_momentum_1d': 0.0,
            'fear_greed_momentum_7d': 0.0,
            'fear_greed_volatility': 0.1,
            
            # Market Dominance
            'btc_dominance': 0.5,
            'eth_dominance': 0.2,
            'top10_dominance': 0.85,
            'symbol_dominance': 0.01,
            'altcoin_season_indicator': 0.5,
            
            # Correlations
            'correlation_sp500': 0.0,
            'correlation_gold': 0.0,
            'correlation_dxy': 0.0,
            'correlation_vix': 0.0,
            'correlation_bonds': 0.0,
            'correlation_oil': 0.0,
            'correlation_btc': 0.8,
            'correlation_stability': 0.5,
            'max_correlation': 0.3,
            
            # Volatility
            'market_volatility_1d': 0.04,
            'market_volatility_7d': 0.04,
            'market_volatility_30d': 0.04,
            'volatility_trend': 0.0,
            'volatility_percentile': 0.5,
            'implied_volatility': 0.05,
            
            # Liquidity
            'market_liquidity': 0.5,
            'bid_ask_spread': 0.005,
            'order_book_depth': 0.5,
            'trading_volume_ratio': 0.5,
            'liquidity_trend': 0.0,
            'exchange_flow_ratio': 0.5
        }
    
    def get_enhanced_macro_features(self, symbol: str, market_cap_rank: int = None) -> Dict[str, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–Ω–≥–∞ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            market_cap_rank: –†–∞–Ω–≥ –ø–æ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–∞–∫—Ä–æ –ø—Ä–∏–∑–Ω–∞–∫–∏
            base_features = self.get_macro_features(symbol)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            if market_cap_rank:
                rank_features = self._get_market_cap_rank_features(market_cap_rank)
                base_features.update(rank_features)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
            seasonal_features = self._get_seasonal_features()
            base_features.update(seasonal_features)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ü–∏–∫–ª—ã
            cycle_features = self._get_economic_cycle_features()
            base_features.update(cycle_features)
            
            return base_features
            
        except Exception as e:
            current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–∞–∫—Ä–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è {symbol}: {e}")
            return self._get_default_macro_features()
    
    def _get_market_cap_rank_features(self, rank: int) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–Ω–≥–∞ –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            'market_cap_rank': min(rank / 100.0, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º
            'is_top10': 1.0 if rank <= 10 else 0.0,
            'is_top50': 1.0 if rank <= 50 else 0.0,
            'is_top100': 1.0 if rank <= 100 else 0.0,
            'rank_stability': max(0.0, 1.0 - rank / 1000.0)  # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞–Ω–≥–∞
        }
    
    def _get_seasonal_features(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        now = datetime.now()
        
        return {
            'month_sin': np.sin(2 * np.pi * now.month / 12),
            'month_cos': np.cos(2 * np.pi * now.month / 12),
            'day_of_week_sin': np.sin(2 * np.pi * now.weekday() / 7),
            'day_of_week_cos': np.cos(2 * np.pi * now.weekday() / 7),
            'is_weekend': 1.0 if now.weekday() >= 5 else 0.0,
            'is_month_end': 1.0 if now.day >= 28 else 0.0
        }
    
    def _get_economic_cycle_features(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤"""
        import random
        
        return {
            'economic_cycle_phase': random.uniform(0.0, 1.0),  # 0=recession, 1=expansion
            'interest_rate_trend': random.uniform(-0.5, 0.5),
            'inflation_expectation': random.uniform(0.0, 0.1),
            'risk_appetite': random.uniform(0.2, 0.8),
            'monetary_policy_stance': random.uniform(-1.0, 1.0)  # -1=dovish, 1=hawkish
        }
