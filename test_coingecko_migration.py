#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ CoinGecko API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å ccxt/Binance –Ω–∞ CoinGecko
"""

import sys
import os
import requests
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    base_url = "http://127.0.0.1:5000"
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —Å CoinGecko...")
    
    # –¢–µ—Å—Ç 1: Health check
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    try:
        response = requests.get(f"{base_url}/api/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"[OK] Health check: {data.get('status', 'unknown')}")
            print(f"   –í–µ—Ä—Å–∏—è: {data.get('version', 'unknown')}")
        else:
            print(f"[ERROR] Health check failed: {response.status_code}")
    except Exception as e:
        print(f"[ERROR] Health check error: {str(e)}")
    
    # –¢–µ—Å—Ç 2: Market data
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ market-data —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    try:
        response = requests.get(f"{base_url}/api/market-data", timeout=15)
        if response.status_code == 200:
            data = response.json()
            market_data = data.get('market_data', [])
            print(f"[OK] Market data –ø–æ–ª—É—á–µ–Ω: {len(market_data)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            if market_data:
                btc_data = next((item for item in market_data if 'BTC' in item.get('symbol', '')), None)
                if btc_data:
                    print(f"   BTC —Ü–µ–Ω–∞: ${btc_data.get('price', 'N/A')}")
                    print(f"   BTC –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {btc_data.get('change_24h', 'N/A')}%")
        else:
            print(f"[ERROR] Market data failed: {response.status_code}")
    except Exception as e:
        print(f"[ERROR] Market data error: {str(e)}")
    
    # –¢–µ—Å—Ç 3: React market data (–Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ react/market-data —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    try:
        response = requests.get(f"{base_url}/api/react/market-data", timeout=15)
        if response.status_code == 200:
            data = response.json()
            market_data = data.get('data', [])
            print(f"[OK] React market data –ø–æ–ª—É—á–µ–Ω: {len(market_data)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            if market_data:
                print(f"   –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤")
        else:
            print(f"[ERROR] React market data failed: {response.status_code}")
    except Exception as e:
        print(f"[ERROR] React market data error: {str(e)}")
    
    # –¢–µ—Å—Ç 4: Crypto prices
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ crypto-prices —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    try:
        response = requests.get(f"{base_url}/api/crypto-prices", timeout=15)
        if response.status_code == 200:
            data = response.json()
            prices = data.get('prices', {})
            print(f"[OK] Crypto prices –ø–æ–ª—É—á–µ–Ω—ã: {len(prices)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            if 'bitcoin' in prices:
                print(f"   Bitcoin —Ü–µ–Ω–∞: ${prices['bitcoin'].get('usd', 'N/A')}")
        else:
            print(f"‚ùå Crypto prices failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Crypto prices error: {str(e)}")
    
    # –¢–µ—Å—Ç 5: Realtime prices
    print("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ realtime-prices —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...")
    try:
        response = requests.get(f"{base_url}/api/realtime-prices", timeout=15)
        if response.status_code == 200:
            data = response.json()
            prices = data.get('prices', [])
            print(f"‚úÖ Realtime prices –ø–æ–ª—É—á–µ–Ω—ã: {len(prices)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        else:
            print(f"‚ùå Realtime prices failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Realtime prices error: {str(e)}")

def test_crypto_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CryptoService –Ω–∞–ø—Ä—è–º—É—é"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CryptoService...")
    
    try:
        from app.services.crypto_service import CryptoService
        
        crypto_service = CryptoService()
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_market_data...")
        symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT']
        market_data = crypto_service.get_market_data(symbols)
        
        if market_data:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(market_data)} —Å–∏–º–≤–æ–ª–æ–≤")
            for data in market_data[:2]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 2
                print(f"   {data.get('symbol', 'N/A')}: ${data.get('price', 'N/A')} ({data.get('change_24h', 'N/A')}%)")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_current_price...")
        btc_price = crypto_service.get_current_price('BTC/USDT')
        if btc_price:
            print(f"‚úÖ BTC —Ü–µ–Ω–∞: ${btc_price}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_historical_data...")
        historical_data = crypto_service.get_historical_data('BTC/USDT', 7)
        if not historical_data.empty:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: {len(historical_data)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   –ü–µ—Ä–∏–æ–¥: {historical_data.index[0]} - {historical_data.index[-1]}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CryptoService: {str(e)}")

def test_analysis_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AnalysisService"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AnalysisService...")
    
    try:
        from app.services.analysis_service import AnalysisService
        
        analysis_service = AnalysisService()
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–∞
        print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ analyze_trend...")
        trend_result = analysis_service.analyze_trend('BTC-USD', '1w')
        if trend_result.get('analysis_data'):
            analysis_data = trend_result['analysis_data']
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            print(f"   –¢—Ä–µ–Ω–¥: {analysis_data.get('trend', 'N/A')}")
            print(f"   RSI: {analysis_data.get('rsi', 'N/A')}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AnalysisService: {str(e)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ CoinGecko API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        response = requests.get("http://127.0.0.1:5000", timeout=5)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: python run.py run")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test_api_endpoints()
    test_crypto_service()
    test_analysis_service()
    
    print("\n" + "=" * 60)
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main()
