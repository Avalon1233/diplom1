#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É PostgreSQL –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import subprocess
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
import time
from pathlib import Path


class PostgreSQLSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL"""
    
    def __init__(self):
        self.postgres_config = {
            'host': 'localhost',
            'port': '5432',
            'user': 'postgres',
            'password': 'password',
            'databases': ['crypto_platform', 'crypto_platform_dev', 'crypto_platform_test']
        }
    
    def check_postgresql_installation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ psql
            result = subprocess.run(['psql', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print(f"‚úÖ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {result.stdout.strip()}")
                return True
            else:
                print("‚ùå PostgreSQL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
                return False
        except (subprocess.TimeoutExpired, FileNotFoundError):
            print("‚ùå PostgreSQL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    
    def check_postgresql_service(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–ª—É–∂–±—ã PostgreSQL"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É–∂–±—É –Ω–∞ Windows
            result = subprocess.run(['sc', 'query', 'postgresql-x64-15'], 
                                  capture_output=True, text=True, timeout=10)
            if 'RUNNING' in result.stdout:
                print("‚úÖ –°–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞")
                return True
            else:
                print("‚ö†Ô∏è –°–ª—É–∂–±–∞ PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
                return self.start_postgresql_service()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª—É–∂–±—ã: {e}")
            return False
    
    def start_postgresql_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–ª—É–∂–±—ã PostgreSQL"""
        try:
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã PostgreSQL...")
            result = subprocess.run(['net', 'start', 'postgresql-x64-15'], 
                                  capture_output=True, text=True, timeout=30)
            if result.returncode == 0:
                print("‚úÖ –°–ª—É–∂–±–∞ PostgreSQL –∑–∞–ø—É—â–µ–Ω–∞")
                time.sleep(3)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª—É–∂–±—É: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–ª—É–∂–±—ã: {e}")
            return False
    
    def test_connection(self, database='postgres'):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            config = self.postgres_config.copy()
            config['database'] = database
            
            conn = psycopg2.connect(
                host=config['host'],
                port=config['port'],
                database=config['database'],
                user=config['user'],
                password=config['password']
            )
            conn.close()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {database} —É—Å–ø–µ—à–Ω–æ")
            return True
        except psycopg2.OperationalError as e:
            if "password authentication failed" in str(e):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres")
                return self.prompt_for_password()
            elif "database" in str(e) and "does not exist" in str(e):
                print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {database} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def prompt_for_password(self):
        """–ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import getpass
        
        print("\nüîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres:")
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        
        if password:
            self.postgres_config['password'] = password
            return self.test_connection()
        else:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥–µ–Ω")
            return False
    
    def create_databases(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ postgres –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑
            conn = psycopg2.connect(
                host=self.postgres_config['host'],
                port=self.postgres_config['port'],
                database='postgres',
                user=self.postgres_config['user'],
                password=self.postgres_config['password']
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()
            
            for db_name in self.postgres_config['databases']:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã
                cursor.execute(
                    "SELECT 1 FROM pg_database WHERE datname = %s",
                    (db_name,)
                )
                
                if cursor.fetchone():
                    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                else:
                    cursor.execute(f'CREATE DATABASE "{db_name}"')
                    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_name} —Å–æ–∑–¥–∞–Ω–∞")
            
            cursor.close()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_user_if_needed(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
        try:
            conn = psycopg2.connect(
                host=self.postgres_config['host'],
                port=self.postgres_config['port'],
                database='postgres',
                user=self.postgres_config['user'],
                password=self.postgres_config['password']
            )
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è crypto_app
            cursor.execute(
                "SELECT 1 FROM pg_user WHERE usename = 'crypto_app'"
            )
            
            if not cursor.fetchone():
                cursor.execute(
                    "CREATE USER crypto_app WITH PASSWORD 'crypto_secure_password'"
                )
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å crypto_app —Å–æ–∑–¥–∞–Ω")
                
                # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                for db_name in self.postgres_config['databases']:
                    cursor.execute(f'GRANT ALL PRIVILEGES ON DATABASE "{db_name}" TO crypto_app')
                
                print("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            else:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å crypto_app —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            cursor.close()
            conn.close()
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def update_env_file(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ PostgreSQL"""
        try:
            env_content = f"""# Database Configuration (PostgreSQL)
DATABASE_URL=postgresql://{self.postgres_config['user']}:{self.postgres_config['password']}@{self.postgres_config['host']}:{self.postgres_config['port']}/crypto_platform
POSTGRES_USER={self.postgres_config['user']}
POSTGRES_PASSWORD={self.postgres_config['password']}
POSTGRES_DB=crypto_platform
POSTGRES_HOST={self.postgres_config['host']}
POSTGRES_PORT={self.postgres_config['port']}
"""
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
            env_path = Path('.env')
            if env_path.exists():
                with open(env_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # –ó–∞–º–µ–Ω—è–µ–º —Å–µ–∫—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                lines = content.split('\n')
                new_lines = []
                skip_db_section = False
                
                for line in lines:
                    if line.startswith('# Database Configuration'):
                        skip_db_section = True
                        new_lines.append(env_content.strip())
                        continue
                    elif skip_db_section and (line.startswith('#') or line.startswith('DATABASE_URL') or 
                                            line.startswith('POSTGRES_') or line.startswith('SQLALCHEMY_')):
                        continue
                    elif skip_db_section and line.strip() == '':
                        skip_db_section = False
                        new_lines.append(line)
                    else:
                        skip_db_section = False
                        new_lines.append(line)
                
                with open(env_path, 'w', encoding='utf-8') as f:
                    f.write('\n'.join(new_lines))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª
                with open(env_path, 'w', encoding='utf-8') as f:
                    f.write(env_content)
            
            print("‚úÖ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")
            return False
    
    def install_python_dependencies(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è PostgreSQL"""
        try:
            print("üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
            result = subprocess.run([
                sys.executable, '-m', 'pip', 'install', 
                'psycopg2-binary>=2.9.0', 'asyncpg>=0.28.0'
            ], capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                print("‚úÖ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def run_setup(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ PostgreSQL"""
        print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if not self.check_postgresql_installation():
            print("\nüí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PostgreSQL:")
            print("1. –°–∫–∞—á–∞–π—Ç–µ —Å https://www.postgresql.org/download/windows/")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º")
            print("3. –ó–∞–ø–æ–º–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è postgres")
            return False
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã
        if not self.check_postgresql_service():
            return False
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.test_connection():
            return False
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
        if not self.create_databases():
            return False
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if not self.create_user_if_needed():
            return False
        
        # –®–∞–≥ 6: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not self.install_python_dependencies():
            return False
        
        # –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞
        if not self.update_env_file():
            return False
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: python migrate_to_postgresql.py")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python run.py")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")
        
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    setup = PostgreSQLSetup()
    
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL")
    print("=" * 40)
    
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python setup_postgresql.py        - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        print("  python setup_postgresql.py --auto - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        return
    
    auto_mode = len(sys.argv) > 1 and sys.argv[1] == '--auto'
    
    if not auto_mode:
        response = input("–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É PostgreSQL? (y/N): ")
        if response.lower() not in ['y', 'yes', '–¥–∞']:
            print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return
    
    success = setup.run_setup()
    
    if success:
        print("\n‚úÖ PostgreSQL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        sys.exit(1)


if __name__ == '__main__':
    main()
